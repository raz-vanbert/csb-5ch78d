{"version":3,"sources":["enums.js","recoil_state.js","utils.js","Controls/Controls.js","Cell/Cell.js","Board/Board.js","BombsGame.js","App.js","index.js"],"names":["GameStatusEnum","GameSizeEnum","S","label","value","c","r","M","L","GameDiffEnum","Easy","Normal","Hard","CellStatusEnum","CellValueEnum","CellTemplateEnum","Fresh","status","v","Void","DirectionsEnum","N","key","x","y","NE","E","SE","SW","W","NW","C","gameStatusState","atom","default","gameSizeState","gameDiffState","gameState","createBlankBoard","size","result","push","plantMines","board","diff","length","Math","random","detectEdges","cell","getAllNeighbors","Object","values","forEach","dir","neighbor","isEdge","getNeighbor","valuateCell","filter","n","valuateBoard","Controls","useRecoilState","setSize","setDiff","setGame","useSetRecoilState","setGameStatus","className","sizes","map","s","onClick","diffs","d","g","createGameBoard","Cell","game","reveal","newGame","_","cloneDeep","neighbors","console","log","row","loseGame","GameBoard","useRecoilValue","BombsGame","App","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5744eb58.chunk.js","sourcesContent":["export const GameStatusEnum = {\r\n  Closed: 0,\r\n  Playing: 1,\r\n  Won: 2,\r\n  Lost: -1\r\n};\r\n\r\nexport const GameSizeEnum = {\r\n  S: { label: \"S\", value: { c: 12, r: 9 } },\r\n  M: { label: \"M\", value: { c: 18, r: 15 } },\r\n  L: { label: \"L\", value: { c: 27, r: 24 } }\r\n};\r\n\r\nexport const GameDiffEnum = {\r\n  Easy: { label: \"üê∂\", value: 0.05 },\r\n  Normal: { label: \"ü¶Å\", value: 0.1 },\r\n  Hard: { label: \"ü¶ç\", value: 0.15 }\r\n};\r\n\r\nexport const CellStatusEnum = {\r\n  Void: -1,\r\n  Fresh: 0,\r\n  Revealed: 1,\r\n  Flag: 2\r\n};\r\n\r\nexport const CellValueEnum = {\r\n  Void: -1,\r\n  Zero: 'üü©',\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n  Mine: \"üí£\"\r\n};\r\n\r\nexport const CellTemplateEnum = {\r\n  Fresh: {\r\n    status: CellStatusEnum.Fresh,\r\n    v: CellValueEnum.Zero,\r\n    r: 0,\r\n    c: 0\r\n  },\r\n  Void: { \r\n    status: CellStatusEnum.Void, \r\n    v: CellValueEnum.Void, r: 0, c: 0 }\r\n};\r\n\r\nexport const DirectionsEnum = {\r\n  N: { key: \"N\", x: 0, y: -1 },\r\n  NE: { key: \"NE\", x: 1, y: -1 },\r\n  E: { key: \"E\", x: 1, y: 0 },\r\n  SE: { key: \"SE\", x: 1, y: 1 },\r\n  S: { key: \"S\", x: 0, y: 1 },\r\n  SW: { key: \"SW\", x: -1, y: 1 },\r\n  W: { key: \"W\", x: -1, y: 0 },\r\n  NW: { key: \"NW\", x: -1, y: -1 },\r\n  C: { key: \"C\", x: 0, y: 0 }\r\n};\r\n","import { atom } from \"recoil\";\r\n\r\nimport { GameStatusEnum, GameSizeEnum, GameDiffEnum } from \"./enums\";\r\n\r\nconst gameStatusState = atom({\r\n  key: \"gameStatus\",\r\n  default: GameStatusEnum.Closed\r\n});\r\n\r\nconst gameSizeState = atom({\r\n  key: \"gameSizeState\",\r\n  default: GameSizeEnum.S\r\n});\r\n\r\nconst gameDiffState = atom({\r\n  key: \"gameDIffState\",\r\n  default: GameDiffEnum.Easy\r\n});\r\n\r\nconst gameState = atom({\r\n  key: \"gameState\",\r\n  default: []\r\n});\r\n\r\nexport { gameStatusState, gameSizeState, gameDiffState, gameState };\r\n","import {\r\n  GameSizeEnum,\r\n  CellTemplateEnum,\r\n  CellValueEnum,\r\n  GameDiffEnum,\r\n  DirectionsEnum\r\n} from \"./enums\";\r\n\r\n// create blank board of specified size<GameSizeEnum>\r\nconst createBlankBoard = (size = GameSizeEnum.S) => {\r\n  let result = [];\r\n\r\n  for (let r = 0; r < size.value.r; r++) {\r\n    result[r] = [];\r\n    for (let c = 0; c < size.value.c; c++) {\r\n      result[r].push({ ...CellTemplateEnum.Fresh, r, c });\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// add random mines according to set difficulty\r\nconst plantMines = (board, diff = GameDiffEnum.Easy) => {\r\n  let result = board;\r\n\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[0].length; c++) {\r\n      if (Math.random() < diff.value) result[r][c].v = CellValueEnum.Mine;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// check if this cell is touching any edges\r\nconst detectEdges = (board, cell = CellTemplateEnum.Fresh) => {\r\n  const result = {\r\n    C: false,\r\n    N: cell.r === 0,\r\n    NE: cell.r === 0 || cell.c === board[0].length - 1,\r\n    E: cell.c === board[0].length - 1,\r\n    SE: cell.r === board.length - 1 || cell.c === board[0].length - 1,\r\n    S: cell.r === board.length - 1,\r\n    SW: cell.r === board.length - 1 || cell.c === 0,\r\n    W: cell.c === 0,\r\n    NW: cell.c === 0 || cell.r === 0\r\n  };\r\n  return result;\r\n};\r\n\r\n// get a neighbor at specified direction\r\nconst getNeighbor = (board, cell, dir = DirectionsEnum.C) => {\r\n  const isEdge = detectEdges(board, cell)[dir.key];\r\n  if (isEdge) return CellTemplateEnum.Void;\r\n  return board[cell.r + dir.y][cell.c + dir.x];\r\n};\r\n\r\n// get all neighbors of a cell\r\nconst getAllNeighbors = (board, cell) => {\r\n  let result = [];\r\n  // iterate through DirectionsEnum\r\n  Object.values(DirectionsEnum).forEach((dir) => {\r\n    let neighbor = getNeighbor(board, cell, dir);\r\n    result.push(neighbor);\r\n  });\r\n  return result;\r\n};\r\n\r\n// returns the number of neighboring mines\r\nconst valuateCell = (board, cell) => {\r\n  const neighbors = getAllNeighbors(board, cell);\r\n  const neighboringMines = neighbors.filter(\r\n    (n) => n.v === CellValueEnum.Mine\r\n  );\r\n  const result = neighboringMines.length;\r\n  if (result === 0) return CellValueEnum.Zero;\r\n  return result;\r\n};\r\n\r\n// iterates through board and valuates each cell\r\nconst valuateBoard = (board) => {\r\n  let result = board;\r\n\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[0].length; c++) {\r\n      const cell = result[r][c];\r\n      if (cell.v !== CellValueEnum.Mine) {\r\n        cell.v = valuateCell(board, cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst createGameBoard = (size = GameSizeEnum.S, diff = GameDiffEnum.Easy) => {\r\n  let board = createBlankBoard(size);\r\n  board = plantMines(board, diff);\r\n  board = valuateBoard(board);\r\n\r\n  return board;\r\n};\r\n\r\nexport { createGameBoard, getAllNeighbors };\r\n","import \"./controls.css\";\r\n\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\n\r\nimport {\r\n  GameSizeEnum as sizes,\r\n  GameDiffEnum as diffs,\r\n  GameStatusEnum\r\n} from \"../enums\";\r\nimport {\r\n  gameSizeState,\r\n  gameDiffState,\r\n  gameStatusState,\r\n  gameState\r\n} from \"../recoil_state\";\r\nimport { createGameBoard } from \"../utils\";\r\n\r\nexport default function Controls() {\r\n  const [size, setSize] = useRecoilState(gameSizeState);\r\n  const [diff, setDiff] = useRecoilState(gameDiffState);\r\n\r\n  const setGame = useSetRecoilState(gameState);\r\n\r\n  const setGameStatus = useSetRecoilState(gameStatusState);\r\n\r\n  const newGame = () => {\r\n    const g = createGameBoard(size, diff);\r\n    setGame(g);\r\n    setGameStatus(GameStatusEnum.Playing);\r\n  };\r\n\r\n  return (\r\n    <div className=\"controls-wrapper\">\r\n      {Object.values(sizes).map((s) => (\r\n        <div\r\n          key={s.label}\r\n          onClick={() => setSize(s)}\r\n          className={s === size ? \"btn active\" : \"btn\"}\r\n        >\r\n          {s.label}\r\n        </div>\r\n      ))}\r\n      <br />\r\n      {Object.values(diffs).map((d) => (\r\n        <div\r\n          key={d.label}\r\n          onClick={() => setDiff(d)}\r\n          className={d === diff ? \"btn active\" : \"btn\"}\r\n        >\r\n          {d.label}\r\n        </div>\r\n      ))}\r\n      <div onClick={newGame} className=\"btn\">\r\n        New Game\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./cell.css\";\r\nimport { CellStatusEnum, CellValueEnum, GameStatusEnum } from \"../enums\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { gameState, gameStatusState } from \"../recoil_state\";\r\nimport _ from \"lodash\";\r\nimport { getAllNeighbors } from \"../utils\";\r\n\r\nexport default function Cell({ cell }) {\r\n  const setGameStatus = useSetRecoilState(gameStatusState);\r\n  const [game, setGame] = useRecoilState(gameState);\r\n\r\n\r\n  // lose game if cell is mine\r\n  // reveal all cells\r\n  // set game status to lost\r\n  const loseGame = () => {\r\n    // reveal all cells\r\n    const newGame = _.cloneDeep(game);\r\n    newGame.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.status = CellStatusEnum.Revealed;\r\n      });\r\n    });\r\n    setGame(newGame);\r\n    // set game status to lost\r\n    setGameStatus(GameStatusEnum.Lost);\r\n  };\r\n\r\n  const reveal = (cell) => {\r\n    const newGame = _.cloneDeep(game);\r\n    newGame[cell.r][cell.c].status = CellStatusEnum.Revealed;\r\n    // if cell value is mine, game over\r\n    if (cell.v === CellValueEnum.Mine) {\r\n      loseGame();\r\n      return;\r\n    }\r\n    if (cell.v === CellValueEnum.Zero) {\r\n      setGame(newGame);\r\n      const neighbors = getAllNeighbors(newGame, cell).filter(\r\n        (n) => n.v !== CellValueEnum.Mine\r\n      );\r\n      console.log(neighbors);\r\n      neighbors.forEach((neighbor) => {\r\n        reveal(neighbor);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    // if game is not playing, do nothing\r\n    console.log(cell);\r\n    // reveal cell\r\n    reveal(cell);\r\n  };\r\n\r\n  return (\r\n    <div className='cell' onClick={handleClick}>\r\n      {cell.status === CellStatusEnum.Revealed ? cell.v : null}\r\n    </div>\r\n  );\r\n}\r\n","import \"./board.css\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { gameState } from \"../recoil_state\";\r\n\r\nexport default function GameBoard() {\r\n  const game = useRecoilValue(gameState);\r\n  return (\r\n    <div className=\"board\">\r\n      {game.length > 0 &&\r\n        game.map((r, y) => (\r\n          <div className=\"row\" key={`r-${y}`}>\r\n            {r.map((c, x) => (\r\n              <Cell key={`c-${y}-${x}`} cell={c} />\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n","import Controls from \"./Controls/Controls\";\r\nimport Board from \"./Board/Board\";\r\n\r\nexport default function BombsGame() {\r\n  return (\r\n    <div className=\"game\">\r\n      <Controls />\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport BombsGame from \"./BombsGame\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <RecoilRoot>\n        <BombsGame />\n      </RecoilRoot>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}